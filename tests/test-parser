#!/bin/bash
set -eu -o pipefail

# Unit test for parser.py.
# Usage: test-parser [keep]
# We keep our temporary folder when `keep' is specified.

# Redirect all output to a log in current folder.
# Keep stdout on fd 3.
bn=$(basename "$0")
log="$bn.log"
exec 3>&1 >"$log" 2>&1
set -x

echo -n 'Testing parser... ' >&3
trap 'echo "ERROR! (see $log)" >&3' ERR

# Make sure parser.py is in the path.
me=$(realpath "$0")
here="${me%/*}"
export PATH="$here/..:$PATH"

# Temporary folder.
if [ "${1:-unset}" == keep ]; then
	tmp=$(mktemp -d "$(basename "$0").XXX")
else
	tmp=$(mktemp -d)
	trap 'rm -fr "$tmp"' EXIT
fi

echo -n 'sample, ' >&3
out="$tmp/out"
args=(--config sample/sample.yaml sample/sample.ekl sample/sample.seq)
parser.py "${args[@]}" |& tee "$out"
grep -q 'Identified.* as "Test sample' "$out"
grep -q 'Updated 1 test.* after applying 1 rule' "$out"
grep -q 'Meta-data' result.md

echo -n 'null config, ' >&3
parser.py "${args[@]}" --config /dev/null |& tee "$out"

if grep -q 'Updated .* tests.* after applying .* rules' "$out"; then
	false
fi

echo -n 'null ekl, ' >&3
parser.py --config sample/sample.yaml /dev/null sample/sample.seq |& tee "$out"
grep -q '3 dropped, 0 failure, 0 pass, 0 warning' "$out"

echo -n 'id ir1 bet-0, ' >&3
parser.py /dev/null contrib/v21.05_0.8_BETA-0/EBBR.seq |& tee "$out"
grep -q ' v21.05_0.8_BETA-0' "$out"

echo -n 'id ir1 bet, ' >&3
parser.py /dev/null contrib/v21.07_0.9_BETA/EBBR.seq |& tee "$out"
grep -q ' v21.07_0.9_BETA' "$out"

parser.py /dev/null contrib/v21.07_0.9_BETA/EBBR_manual.seq |& tee "$out"
grep -q ' v21.07_0.9_BETA' "$out"

echo -n 'id ir1, ' >&3
parser.py /dev/null contrib/v21.09_1.0/EBBR.seq |& tee "$out"
grep -q ' v21.09_1.0' "$out"

parser.py /dev/null contrib/v21.09_1.0/EBBR_manual.seq |& tee "$out"
grep -q ' v21.07_0.9_BETA' "$out"

echo -n 'id sie, ' >&3
parser.py /dev/null contrib/v21.10_SIE_REL1.0/BBSR.seq |& tee "$out"
grep -q ' v21.10_SIE_REL1.0' "$out"

echo -n 'id ir2 bet-0, ' >&3
parser.py /dev/null contrib/v22.06_2.0.0_BETA-0/EBBR.seq |& tee "$out"
grep -q ' v21.09_1.0' "$out"

parser.py /dev/null contrib/v22.06_2.0.0_BETA-0/EBBR_manual.seq |& tee "$out"
grep -q ' v21.07_0.9_BETA' "$out"

echo -n 'id ir2 bet-1, ' >&3
parser.py /dev/null contrib/v22.10_2.0.0_BETA-1/EBBR.seq |& tee "$out"
grep -q ' v22.10_2.0.0_BETA-1' "$out"

parser.py /dev/null contrib/v22.10_2.0.0_BETA-1/EBBR_manual.seq |& tee "$out"
grep -q ' v21.07_0.9_BETA' "$out"

parser.py /dev/null contrib/v22.10_2.0.0_BETA-1/BBSR.seq |& tee "$out"
grep -q ' v22.10_2.0.0_BETA-1' "$out"

echo -n 'id ir2, ' >&3
parser.py /dev/null contrib/v23.03_2.0.0/EBBR.seq |& tee "$out"
grep -q ' v22.10_2.0.0_BETA-1' "$out"

parser.py /dev/null contrib/v23.03_2.0.0/EBBR_manual.seq |& tee "$out"
grep -q ' v21.07_0.9_BETA' "$out"

parser.py /dev/null contrib/v23.03_2.0.0/BBSR.seq |& tee "$out"
grep -q ' v22.10_2.0.0_BETA-1' "$out"

echo -n 'id ir1 32b, ' >&3
parser.py /dev/null contrib/v22.10_IR_32b_0.7_BETA-0/EBBR.seq |& tee "$out"
grep -q ' v22.10_IR_32b_0.7_BETA-0' "$out"

parser.py /dev/null contrib/v22.10_IR_32b_0.7_BETA-0/EBBR_manual.seq |& tee "$out"
grep -q ' v21.07_0.9_BETA' "$out"

echo -n 'input md, ' >&3
parser.py "${args[@]}" --input-md result.md |& tee "$out"

echo -n 'csv, ' >&3
csv="$tmp/out.csv"
parser.py "${args[@]}" --csv "$csv" |& tee "$out"
grep -q ';name;' "$csv"

echo -n 'json, ' >&3
json="$tmp/out.json"
parser.py "${args[@]}" --json "$json" |& tee "$out"
grep -qF '{' "$json"
grep -q '"name":' "$json"

if python3 -c 'import junit_xml' 2>/dev/null; then
	echo -n 'junit, ' >&3
	junit="$tmp/out.junit"
	parser.py "${args[@]}" --junit "$junit" |& tee "$out"
	grep -q 'xml version' "$junit"
else
	echo -n '(no junit), ' >&3
fi

echo -n 'md, ' >&3
md="$tmp/out.md"
parser.py "${args[@]}" --md "$md" |& tee "$out"
grep -q '# SCT Summary' "$md"

echo -n 'yaml, ' >&3
yaml="$tmp/out.yaml"
parser.py "${args[@]}" --yaml "$yaml" |& tee "$out"
yamllint -c "$here/yamllint.yaml" "$yaml"
validate.py --schema "$here/../schemas/yaml-schema.yaml" "$yaml"

echo -n 'template, ' >&3
tpl="$tmp/template.yaml"
parser.py "${args[@]}" --template "$tpl" |& tee "$out"
yamllint -c "$here/yamllint.yaml" "$tpl"
validate.py --schema "$here/../schemas/template-schema.yaml" "$tpl"

echo -n 'print, ' >&3
parser.py "${args[@]}" --fields 'result,name' --print |& tee "$out"
grep -q 'UEFI Compliant' "$out"
grep -q 'PASS' "$out"
grep -q 'IGNORED' "$out"
grep -q 'FAILURE' "$out"
grep -q 'WARNING' "$out"
grep -q 'SPURIOUS' "$out"
grep -q 'DROPPED' "$out"

echo -n 'uniq, ' >&3
parser.py "${args[@]}" --uniq --fields 'count,result,name' --print |& tee "$out"
grep -q '^2 \+PASS' "$out"

echo -n 'filter, ' >&3
parser.py "${args[@]}" --filter 'x["result"] == "FAILURE"' --fields 'result,name' --print |& tee "$out"
grep -q 'FAILURE  UEFI Compliant' "$out"

if grep -q -e 'PASS' -e 'IGNORED' -e 'WARNING' -e 'SPURIOUS' -e 'DROPPED' "$out"; then
	false
fi

echo -n 'meta, ' >&3
parser.py "${args[@]}" --print-meta |& tee "$out"
grep -q 'meta-data' "$out"
grep -q 'command-line:' "$out"
grep -q 'date:' "$out"

if which git; then
	grep -q 'git-commit:' "$out"
fi

grep -q 'seq-file-ident: Test sample.seq' "$out"

echo 'ok.' >&3
